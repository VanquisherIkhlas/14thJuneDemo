name: github-actions-template
run-name: ${{ github.actor }} is running GitHub Actions templates

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
      - release/*
      - feature/*
    paths:
        - 'force-app/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
        - master
    paths:
        - 'force-app/**'
      
jobs:
  build:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    # container:
    #  image: salesforce/salesforcedx:latest-full
      
    steps:
    
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install CLI
        run: |
          npm install
          npm install sfdx-cli --global
          
      # Run PMD scan
      - name: 'Run PMD scan'
        uses: pmd/pmd-github-action@v1
        id: pmd
        with:
            sourcePath: 'force-app'
            rulesets: 'ruleset.xml'
            analyzeModifiedFilesOnly: false

      # Check for PMD violations
      - name: 'Check for PMD violations'
        # if: steps.pmd.outputs.violations != 0
        run: |
          # exit 1
          echo "test"
      

          
      - name: Installing sfdx git delta
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
      
      - name: Generate the Delta Since Last Commit
        run: |
          mkdir delta
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output "./delta" --generate-delta --source force-app/ 
          cat delta/package/package.xml
          
      - name: Populate auth file with SFDX_URL secret of integration org
        shell: bash
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
      - name: Authenticate to Integration Org
        run: >-
          sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a 
          HubOrg   
      - name: Install SFDX CLI Scanner
        run: |
          echo 'y' | sfdx plugins:install @salesforce/sfdx-scanner
          
      - name: Run SFDX CLI Scanner
        run: |
          mkdir reports
          sfdx scanner:run -f html -t "force-app" -e "eslint,retire-js,pmd,cpd" -c "Design,Best Practices,Code Style,Performance,Security" --outfile reports/scan-reports.html
          
      - uses: actions/upload-artifact@v3
        with:
          name: cli-scan-report
          path: reports/scan-reports.html
          

          
      - name: Install the JEST Plugin
        run: |
          # npm install
          npm install @salesforce/sfdx-lwc-jest --save-dev
          
      - name: Deploy code to Salesforce Org
        if: github.event.pull_request.merged == true
        run: |
          echo "Deploying Code to Org"
          sfdx force:source:deploy -x delta/package/package.xml -u HubOrg # --postdestructivechanges destructiveChanges/destructiveChanges.xml

      - name: 'Run Apex tests'
        run: sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20 -u HubOrg
        
      - name: 'Delete coverage file (temporary step)'
        run: rm ./tests/apex/test-result-707*-codecoverage.json
    
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v3
        with:
          
          flags: Apex
      
      - name: 'Lint Lightning Web Components'
        run: |
          # npm run lint:lwc
          echo "Lint Lightning Web Components"
        
      - name: Run the Jest coverage script
        if: github.event.pull_request.merged == true
        run: |
          npm run test:unit:coverage
          echo "Run the Jest coverage script"
          
      - uses: codecov/codecov-action@v3
        with:
          
          flags: LWC
